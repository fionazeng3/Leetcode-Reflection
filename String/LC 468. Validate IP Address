/*
LC 468. Validate IP Address
这道题主要考察细节。 而且split 的用法要记一下
public String[] split(String regex,
             int limit)
Splits this string around matches of the given regular expression.
The array returned by this method contains each substring of this string that is terminated by another substring that matches the given expression or is terminated by the end of the string. The substrings in the array are in the order in which they occur in this string. If the expression does not match any part of the input then the resulting array has just one element, namely this string.

The limit parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array. If the limit n is greater than zero then the pattern will be applied at most n - 1 times, the array's length will be no greater than n, and the array's last entry will contain all input beyond the last matched delimiter. If n is non-positive then the pattern will be applied as many times as possible and the array can have any length. If n is zero then the pattern will be applied as many times as possible, the array can have any length, and trailing empty strings will be discarded.

The string "boo:and:foo", for example, yields the following results with these parameters:

Regex	Limit	Result
:	2	{ "boo", "and:foo" }
:	5	{ "boo", "and", "foo" }
:	-2	{ "boo", "and", "foo" }
o	5	{ "b", "", ":and:f", "", "" }
o	-2	{ "b", "", ":and:f", "", "" }
o	0	{ "b", "", ":and:f" }

public String[] split(String regex)
Splits this string around matches of the given regular expression.
This method works as if by invoking the two-argument split method with the given expression and a limit argument of zero.
*/

class Solution {
    public String validIPAddress(String IP) {
        boolean is4 = isIPv4(IP);
        if(is4) return "IPv4";
        boolean is6 = isIPv6(IP);
        if(is6) return "IPv6";
        return "Neither";
    }

    private boolean isIPv4(String IP) {
        String[] elements = IP.split("\\.", -1);
        if(elements.length != 4) return false;
        for(String eachElement : elements) {
            int num = 0;
            try{
                num = Integer.parseInt(eachElement);
            } catch (Exception e) {
                return false;
            }
            if(num == 0) {
                if(eachElement.length() != 1) return false;
            } else {
                if(eachElement.charAt(0) == '0' || num > 255 || num < 0) return false;
            }
        }
        return true;
    }

    private boolean isIPv6(String IP) {
        String[] elements = IP.split(":", -1);
        System.out.println(elements.length);
        if(elements.length != 8) return false;
        for(String eachElement: elements) {
            char[] word = eachElement.toCharArray();
            if(word.length > 4 || word.length == 0) return false;
            for(int i = word.length - 1; i>=0; i--) {
                char c= word[i];
                if(!Character.isDigit(c)) {
                    if(!Character.isLetter(c)) return false;
                    c = Character.toLowerCase(c);
                    int currentNum = c - 'a' + 10;
                    if(currentNum > 15) return false;
                }
            }
        }
        return true;
    }
}
