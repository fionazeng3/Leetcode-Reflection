/*
LC 427. Construct Quad Tree
这道题其实很简单
在recursion 里面只有当前这个范围的格子
数字不一致就开始往下递归
*/

/*
// Definition for a QuadTree node.
class Node {
    public boolean val;
    public boolean isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;

    public Node() {}

    public Node(boolean _val,boolean _isLeaf,Node _topLeft,Node _topRight,Node _bottomLeft,Node _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/
class Solution {
    public Node construct(int[][] grid) {
        int size = grid.length;
        return buildNode(0, 0, size, grid);
    }

    private Node buildNode(int x, int y, int size, int[][] grid) {
        if(size == 1) {
            return new Node(grid[y][x] == 1, true, null, null, null, null);
        }
        boolean isSame = true;
        int ref = grid[y][x];
        for(int i = x; i < x + size; i++) {
            for(int j = y; j < y + size; j++) {
                if(grid[j][i] != ref) {
                    isSame = false;
                    break;
                }
            }
        }
        if(isSame) {
            return new Node(ref == 1, true, null, null, null, null);
        } else {
            Node ans = new Node(false, false, null, null, null, null);
            ans.topLeft = buildNode(x, y, size / 2, grid);
            ans.topRight = buildNode(x + size / 2, y, size/2, grid);
            ans.bottomLeft = buildNode(x, y + size / 2, size/2, grid);
            ans.bottomRight = buildNode(x + size / 2, y + size / 2, size / 2, grid);
            return ans;
        }
    }
}
