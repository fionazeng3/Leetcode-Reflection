/*
LC 46. Permutations
很简单的一道枚举型dfs
注意backtracking 要同时backtrack input 和current
*/
class Solution {
    List<List<Integer>> ans = new ArrayList<>();
    public List<List<Integer>> permute(int[] nums) {
        List<Integer> input = new ArrayList<>();
        for(int num : nums) {
            input.add(num);
        }
        List<Integer> current = new ArrayList<>();
        dfs(current, input);
        return ans;
    }

    private void dfs(List<Integer> current, List<Integer> input) {
        if(input.isEmpty()) {
            ans.add(new ArrayList<>(current));
            return;
        }
        for(int i = 0; i < input.size(); i++) {
            int element = input.get(i);
            current.add(element);
            input.remove(i);
            dfs(current, input);
            current.remove(current.size() - 1);
            input.add(i, element);
        }
    }
}
