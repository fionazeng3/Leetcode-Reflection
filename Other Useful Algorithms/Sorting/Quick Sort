/*
Quick Sort
Worst Case O(n^2)
Best Case O(nlogn)
Average O(nlogn)
Stable No
Inplace: No
*/

quicksort 的精髓在于：挑一个pivot， 把比它小的element
放在它前面， 把比它大的element 放在它后面
这个模版是每次把array 最后一个element 作为pivot
lastLow 记录了最后一个<= pivot 的位置
在partition 的for loop 中， 只要看到比pivot 小的数，
就让lastLow 往前挪一位， 再和i swap。这样比pivot 大的数就会慢慢
地被挪到后面， 比pivot 小的数会被移动到前面。 最后让pivot 跟
lastLow + 1 换就好了
class Solution {
    public int[] sortArray(int[] nums) {
        int len = nums.length;
        quickSort(nums, 0, len - 1);
        return nums;
    }
    
    private void quickSort(int[] nums, int start, int end) {
        if(start > end) return;
        int index = partition(nums, start, end);
        quickSort(nums, start, index - 1);
        quickSort(nums, index + 1, end);
    }
    
    private int partition(int[] nums, int low, int high) {
        int lastLow = low - 1;
        int pivot = nums[high];
        for(int i = low; i < high; i++) {
            if(nums[i] <= pivot) {
                lastLow++;
                swap(nums, lastLow, i);
            }
        }
        
        swap(nums, high, lastLow + 1);
        return lastLow + 1;
    }
    
    private void swap(int[] nums, int a, int b) {
        int temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }
}
