/**
LC 671. Second Minimum Node In a Binary Tree
还是分治的想法。 只想当前这一层
如果当前有child 跟root 的值一样， 那么说明这个child
位置还没有找出当前子树第一个比root 大的值， 所以recursion
如果两个children 都跟root 不想等， 那么直接return 更小的child value
如果一个node 左右children 都为null， 那说明traverse 到现在都跟root value 一样，
没有找到valid 值。 所以return -1.
**/
class Solution {
    public int findSecondMinimumValue(TreeNode root) {
        if(root.left == null && root.right == null) {
            return -1;
        }
        int valLeft = root.left.val == root.val ? findSecondMinimumValue(root.left) : root.left.val;
        int valRight = root.right.val == root.val ? findSecondMinimumValue(root.right) : root.right.val;
        if(valLeft != -1 && valRight != -1) {
            return Math.min(valLeft, valRight);
        } else if(valLeft == -1 && valRight == -1) {
            return -1;
        }else if(valLeft == -1) {
            return valRight;
        } else  {
            return valLeft;
        }
    }
}
