/*
LC 114. Flatten Binary Tree to Linked List
这道题很简单. 用一个global 的node， 指向当前node
然后树的话先处理左边， 再处理右边

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    TreeNode lastNode;
    public void flatten(TreeNode root) {
        if(root == null) return;
        lastNode = new TreeNode(-1);
        dfs(root);
    }
    
    private void dfs(TreeNode current) {
        if(current == null) return;
        lastNode.right = current;
        lastNode = current;
        TreeNode left = current.left;
        TreeNode right = current.right;
        current.left = null;
        dfs(left);
        dfs(right);
    }
}




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public void flatten(TreeNode root) {
        if(root == null) return;
        Deque<TreeNode> dq = new ArrayDeque<>();
        dq.addFirst(root);
        while(!dq.isEmpty()) {
            TreeNode current = dq.pollFirst();
            if(current.right != null) dq.addFirst(current.right);
            if(current.left != null) dq.addFirst(current.left);
            current.left = null;
            current.right = dq.peekFirst();
        } 
    }
}
