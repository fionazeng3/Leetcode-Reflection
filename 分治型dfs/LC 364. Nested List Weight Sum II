/*
LC 364. Nested List Weight Sum II
这道题答题思路和 Nested List Weight Sum 一样
dfs 的职责是求一个list 的sum。 base case 是
当前的一个元素是integer。 如果当前一个元素是
list， 就用dfs 找下一层的sum

因为这道题的depth 是倒过来的， 所以我在dfs 的时候
记录了maxDepth， 并且把每一个元素的weight 都先记载在
list 里面， 最后再一起算
*/
/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
 class Solution {
     public int depthSumInverse(List<NestedInteger> nestedList) {
         if(nestedList.isEmpty()) return 0;
         List<Integer> nums = new ArrayList<>();
         List<Integer> weights = new ArrayList<>();
         int maxDepth = resolveList(nestedList, nums, weights, 1);
         int sum = 0;
         for(int i = 0; i < nums.size(); i++) {
             sum += nums.get(i) * (maxDepth - weights.get(i) + 1);
         }
         return sum;
     }
     
     private int resolveList(List<NestedInteger> nestedList, List<Integer> nums, List<Integer> weights, int currentWeight) {
         int maxDepth = currentWeight;
         for(NestedInteger eachInteger: nestedList) {
             if(eachInteger.isInteger()) {
             nums.add(eachInteger.getInteger());
             weights.add(currentWeight);
         } else {
                 maxDepth = Math.max(maxDepth, resolveList(eachInteger.getList(), nums, weights, currentWeight + 1));
             }
         }
         return maxDepth;
     }
 }
