/*
LC 333. Largest BST Subtree
因为这道题需要考虑的问题比较多， 所以dfs里面要返回array {count, min, max}
首先考虑一下怎么样的树是一个合格的bst？ 左树最大值比自己小且右树最小值比自己大
因为这道题问的是 Largest BST Subtree， 所以如果一个node 发现废掉了， 那它
所有的祖先都废掉了
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int maxCount = 0;
    public int largestBSTSubtree(TreeNode root) {
        dfs(root);
        return maxCount;
    }
    // num, min, max
    private int[] dfs(TreeNode current) {
        if(current == null) return new int[]{0, 0, 0};
        int[] leftStat = dfs(current.left);
        int[] rightStat = dfs(current.right);
        int[] result;
        if(leftStat[0] == -1 || rightStat[0] == -1 ||
           (leftStat[0] != 0 && leftStat[2] >= current.val) ||
           (rightStat[0] != 0 && rightStat[1] <= current.val)) {
            result = new int[]{-1, 0, 0};
        } else{
            int count = leftStat[0] + rightStat[0] + 1;
            maxCount = Math.max(count, maxCount);
            int min = leftStat[0] == 0 ? current.val : leftStat[1];
            int max = rightStat[0] == 0 ? current.val : rightStat[2];
            result = new int[]{count, min, max};
        }
        
        return result;
    }
}
