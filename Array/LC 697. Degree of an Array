/*
LC 697. Degree of an Array
这道题的做法是用hashmap 记录
每一个数字的其实位置， 最终位置，
和频率。 然后用两个变量记录maxdegree
和shortestLen， 随时更新
*/
class Solution {
    public int findShortestSubArray(int[] nums) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        int degreeMax = 0;
        int shortestLen = Integer.MAX_VALUE;
        // list contains start, end, frequency
        for(int i = 0; i < nums.length; i++) {
            int num = nums[i];
            if(!map.containsKey(nums[i])) {
                map.put(num, new ArrayList<>());
                map.get(num).add(i);
                map.get(num).add(i);
                map.get(num).add(1);
            } else {
                map.get(num).set(1, i);
                map.get(num).set(2, map.get(num).get(2) + 1);
            }
            int start = map.get(num).get(0);
            int end = map.get(num).get(1);
            int freq = map.get(num).get(2);
            if(freq > degreeMax) {
                degreeMax = freq;
                shortestLen = end - start +1;
            } else if(freq == degreeMax && end - start < shortestLen) {
                shortestLen = end - start + 1;
            }
        }
        return shortestLen;
    }
}
