/*
LC 986. Interval List Intersections
这道题的解法算是interval 里面比较有代表性的了
首先求两个interval有没有交集用这一段
int lo = Math.max(A[i][0], B[j][0]);
int hi = Math.min(A[i][1], B[j][1]);
if(lo <= hi) ans.add(new int[]{lo, hi});
再来用双指针指向两个序列的当前元素。 然后哪个元素
的endpoint 小，当前就丢哪个元素。 因为endpoint
小的在int hi = Math.min(A[i][1], B[j][1]);里面
已经被取了值了。 后面肯定用不到了
*/
class Solution {
    public int[][] intervalIntersection(int[][] A, int[][] B) {
        List<int[]> ans = new ArrayList<>();
        int i = 0;
        int j = 0;
        while(i < A.length && j < B.length) {
            int lo = Math.max(A[i][0], B[j][0]);
            int hi = Math.min(A[i][1], B[j][1]);
            if(lo <= hi) ans.add(new int[]{lo, hi});
            if(A[i][1] < B[j][1]) {
                i++;
            } else {
                j++;
            }
        }
        return ans.toArray(new int[ans.size()][]);
    }
}
