/*
LC 523. Continuous Subarray Sum
这道题看到subarray sum， 很自然地想到用prefix sum + hashMap
不过这道题要注意corner case
1. k == 0 这种情况下不能用mod， 直接用sum 就好了
2. 前两个数加起来是0， 或者直接是k 的倍数。 这种情况下要在map 里先加一个（0， -1）
3. 题意中sums up to n*k n 可以是0
*/
class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        Map<Integer, Integer> modToIndex = new HashMap<>();
        int len = nums.length;
        int sum = 0;
        modToIndex.put(0, -1);
        for(int i = 0; i < len; i++) {
            sum += nums[i];
            int mod = k == 0 ? sum : sum % k;
            if(modToIndex.containsKey(mod) && i - modToIndex.get(mod) >=2) return true;
            modToIndex.putIfAbsent(mod, i);
        }
        return false;
    }
}
