/*
LIN 139. Subarray Sum Closest
这道题的解题思路其实跟subarray sum 差不多， 也是用的前缀数组和
不过唯一不一样的是这道题要求和与0 最近， 而不是和等于0
大概思路就是， 记录每一个prefix sum 和他们的index。
然后将prefix sum 排序。 然后把每一个sum 跟排在前面的sum
做减法。 找到差最小的两个sum。 那么subarray 的index 就是
头index + 1 ～ 尾index。

举个简单的例子 -3 1 1 -3 5
那么 subarray 【1，3】 的sum 就是
prefix【3】 - prefix【0】

用prefix 的方法能覆盖所有subarray 的可能性吗？
答案是可以的。 比如说你想求【x, y】的subarray
直接prefix【y】 - prefix[x]就好了
所以说prefix 是subarray 的一个好帮手

具体的实现方法就是建立pair class 里面存sum 和index
再存到list 里面， 排序， 找最小差
*/
class Pair {
    int index;
    int sum;
    public Pair(int index, int sum) {
        this.index = index;
        this.sum = sum;
    }
}

public class Solution {
    /*
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number and the index of the last number
     */
    public int[] subarraySumClosest(int[] nums) {
        int[] ans = new int[2];
        int len = nums.length;
        if(nums == null || len == 0) return ans;
        List<Pair>helper = new ArrayList<>();
        helper.add(new Pair(0, 0));
        int currentSum = 0;
        for (int i = 0; i < len; i++) {
            currentSum += nums[i];
            helper.add(new Pair(i + 1,currentSum));
        }
        Collections.sort(helper, (p1, p2) -> {return p1.sum - p2.sum;});
        int difference = Integer.MAX_VALUE;
        for(int i = 1; i<= len; i++) {
            int currentDiff = Math.abs(helper.get(i).sum - helper.get(i - 1).sum);
            if(currentDiff < difference) {
                difference = currentDiff;
                ans[0] = Math.min(helper.get(i).index, helper.get(i - 1).index);
                ans[1] = Math.max(helper.get(i).index, helper.get(i - 1).index) - 1;
            }
        }
        return ans;
    }
}
