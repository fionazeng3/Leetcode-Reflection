/*
LC 912. Sort an Array
quick sort å’Œmerge sort è§£
*/
class Solution {
    public int[] sortArray(int[] nums) {
        int len = nums.length;
        quickSort(nums, 0, len - 1);
        return nums;
    }

    private void quickSort(int[] nums, int start, int end) {
        if(start > end) return;
        int index = partition(nums, start, end);
        quickSort(nums, start, index - 1);
        quickSort(nums, index + 1, end);
    }

    private int partition(int[] nums, int low, int high) {
        int lastLow = low - 1;
        int pivot = nums[high];
        for(int i = low; i < high; i++) {
            if(nums[i] <= pivot) {
                lastLow++;
                swap(nums, lastLow, i);
            }
        }

        swap(nums, high, lastLow + 1);
        return lastLow + 1;
    }

    private void swap(int[] nums, int a, int b) {
        int temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }
}

class Solution {
    public int[] sortArray(int[] nums) {
        int len = nums.length;
        mergeSort(nums, 0, len - 1);
        return nums;
    }

    private void mergeSort(int[] nums, int start, int end) {
        if(start >= end) return;
        int mid = start + (end - start) /2;
        mergeSort(nums, start, mid);
        mergeSort(nums, mid + 1, end);
        merge(nums, start, mid, end);
    }

    private void merge(int[] nums, int start, int mid, int end) {
        int n1 = mid - start + 1;
        int n2 = end - mid;
        int[] arr1 = new int[n1];
        int[] arr2 = new int[n2];
        for(int i = 0; i < n1; i++) {
            arr1[i] = nums[start + i];
        }
        for(int i = 0; i < n2; i++) {
            arr2[i] = nums[mid + 1 + i];
        }
        int p1 = 0;
        int p2 = 0;
        int index = start;
        while(p1 < n1 || p2 < n2) {
            if(p1 >= n1) {
                nums[index] = arr2[p2];
                p2++;
            } else if(p2 >= n2) {
                nums[index] = arr1[p1];
                p1++;
            } else if(arr1[p1] < arr2[p2]) {
                nums[index] = arr1[p1];
                p1++;
            } else {
                nums[index] = arr2[p2];
                p2++;
            }
            index++;
        }
    }
}
