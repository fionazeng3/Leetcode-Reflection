/*LC 621. Task Scheduler
这道题首先要将一大堆名字转化成每个名字出现的次数。
因为名字是从A-Z 的字母， 所以用一个size 为26 的array
记录就好了。

然后我们应该观察到：最给时间拖后腿的是出现最多次的task，
因为考虑到cooling time 的问题。 所以每一次process，
应该优先出现次数最多的task。

最后有一点注意的是： 如果n 比26 还大， i 加到25 以后
不应该回到0， 因为这样就违反了cooling 的rule。
所以当i走到25 以后， 我们应该空耗着idle， time++， i++*/

class Solution {
    public int leastInterval(char[] tasks, int n) {
        int[] map = new int[26];
        for(int i = 0; i < tasks.length; i++) {
            char current = tasks[i];
            map[current - 'A']++;
        }
        int time = 0;
        Arrays.sort(map);
        while(map[25] > 0) {
            int i = 0;
            while(i <= n && map[25] > 0) {
                if(i < 26) map[25 - i] --;
                i++;
                time++;
            }
            Arrays.sort(map);
        }
        return time;
    }
}
