/*
LC 134. Gas Station
这道题暴力解法为O（N^2）基本就是把每一个位置都从头走到尾一遍。
但是其实这道题可以减少为O（N） 首先这道题基于一个数学定理
如果一个数组的总和非负，那么一定可以找到一个起始位置，从他开始绕数组一圈，累加和一直都是非负的

那么如何求开始位置在哪？

注意到这样一个现象：

1. 假如从位置i开始，i+1，i+2...，一路开过来一路油箱都没有空。说明什么？说明从i到i+1，i+2，...肯定是正积累。
2. 现在突然发现开往位置j时油箱空了。这说明什么？说明从位置i开始没法走完全程(废话)。那么，我们要从位置i+1开始重新尝试吗？
不需要！为什么？因为前面已经知道，位置i肯定是正积累，那么，如果从位置i+1开始走更加没法走完全程了，因为没有位置i的正积累了。
同理，也不用从i+2，i+3，...开始尝试。所以我们可以放心地从位置j+1开始尝试。

这里面还有一个优化： 为什么不用检验车走一圈走回来， 而是走到array 尽头就好了？
我们知道， 如果当前的位置为i， 那么i 之前已经是负积累了。 我们想让 i- len的正积累越大越好了
那如果从i 开始， 一直是正积累， 那么我们没有理由把i 去掉
*/
class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int gasSum = 0;
        int costSum = 0;
        if(gasSum < costSum) return -1;
        int leftOver = 0;
        int start = 0;
        int len = gas.length;
        for(int i = 0; i < len; i++) {
            gasSum += gas[i];
            costSum += cost[i];
            leftOver += gas[i] - cost[i];
            if(leftOver < 0) {
                leftOver = 0;
                start = i+1;
                continue;
            }
        }
        if(gasSum < costSum) return -1;
        return start;
    }
}
