/*
LC 713. Subarray Product Less Than K
这道题虽然不太明显， 但其实也是一个双指针问题。
首先双指针问题怎么区别于contiguous Subarray 问题呢？
双指针一般是问大于或小于一个值。 这样有一个约束， 一个指针动了以后另一个指针
只能往后动， 不能往回动。 而contiguous Subarray 问题往往是问是否等于一个数
这样很容易用hashmap 或者hashset 来做。

以这道题而言， 我们需要枚举以每个元素为最左元素的时候都有
哪些合格的subarray。 设置两个pointer。 r 向右移动。如果当前的总乘机太大了， 就让l 往右移动
r 每动一次就求一下以nums【l】为最左的合格subarray 一共有多少。 算法是 r- l

*/

class Solution {
    public int numSubarrayProductLessThanK(int[] nums, int k) {
        int len = nums.length;
        int j = 0;
        int result = 1;
        int counter = 0;
        for(int i = 0; i < len; i++) {
            if(i > j) j = i;
            while(j < len && result * nums[j] < k) {
                result*= nums[j];
                j++;
            }
            counter += j - i;
            if(j > i) result /= nums[i];
        }
        return counter;
    }
}