/*
LC 127. Word Ladder
注意一下这道题用dfs 会超时， 因为要把所有的可能性都
过一遍。 但是bfs 到endword 就停了， 所以要efficient 很多
*/
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        int len = wordList.size();
        boolean[] visited = new boolean[len];
        if(!wordList.contains(endWord)) return 0;
        Queue<String> q = new LinkedList<>();
        q.offer(beginWord);
        q.offer(null);
        int step = 1;
        boolean found = false;
        while(!q.isEmpty()) {
            String current = q.poll();
            if(current == null) {
                if(!q.isEmpty()) {
                    q.offer(null);
                }
                step++;
                continue;
            }
            if(current.equals(endWord)) {
                found = true;
                break;
            }
            for(int i = 0; i < len; i++) {
                if(!visited[i] && offByOne(current, wordList.get(i))) {
                    visited[i] = true;
                    q.offer(wordList.get(i));
                }
            }
        }
        return found ? step : 0;
    }


    private boolean offByOne(String s1, String s2) {
        int diff = 0;
        for(int i = 0; i < s1.length(); i++) {
            if(s1.charAt(i) != s2.charAt(i)) {
                diff++;
            }
        }
        return diff == 1;
    }
}
