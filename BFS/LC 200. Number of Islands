/*
LC 200. Number of Islands
这道题的基本思路就是for loop traverse grid，
遇到一个‘1’就 ans++ 并用bfs 把它周围的1 变成0.
最后return ans。 这里有一个细节要注意
在bfs 的时候， 遇到一个周边的1 就先把它变成
0， 再把它的位置放到queue 里面。 因为如果
不这样做的话， 就会造成重复加好几次相同的
元素， 形成forever loop
*/
class Solution {
    int y;
    int x;
    char[][] input;
    int[] dx = {0, 0, -1, 1};
    int[] dy = {-1, 1, 0, 0};
    public int numIslands(char[][] grid) {
        int ans = 0;
        y = grid.length;
        if(y == 0) return ans;
        x = grid[0].length;
        input = grid;
        for(int i = 0; i < x; i++) {
            for(int j = 0; j < y; j++) {
                if(input[j][i] == '1')  {
                    bfs(i, j);
                    ans++;
                }

            }
        }
        return ans;
    }

    private void bfs(int islandX, int islandY) {
        Queue<Integer> qx = new LinkedList<>();
        Queue<Integer> qy = new LinkedList<>();
        qx.offer(islandX);
        qy.offer(islandY);
        while(!qx.isEmpty()) {
            int cx = qx.poll();
            int cy = qy.poll();
            input[cy][cx] = '0';
            for(int i = 0; i < 4; i++) {
                int nx = cx + dx[i];
                int ny = cy + dy[i];
                if(nx >= 0 && nx < x && ny >= 0 && ny < y && input[ny][nx] == '1') {
                    input[ny][nx] = '0';
                    qx.offer(nx);
                    qy.offer(ny);
                }
            }
        }
    }
}
