/*
LC 207. Course Schedule
这道题是一道典型的topological sort 题目

topological sort 的意义在于把一个ordered graph
的排序写出来。而一个有环的ordered graph 是
没有办法有topological sort 的。 这道题其实就是
让我们找graph 里面是否存在环。

topological sort 一般有两种解法： dfs 和bfs
这道题我们用的是dfs 的解法。 一般的解法是：开两个
数组： visited 和visiting。 拿出一个元素， 先用dfs
看它的neighbors。 neighbors 看完以后把自己 visited
的array 的对应值改为true， 并加入最终的order list里
order list 应该是倒着加入的。 用stack 可以实现。 注意
每一个元素进到dfs 里面的时候如果它的visiting 是true， 就
说明这个graph 当前是存在环的。 而对于这道题来讲， 我们的
首要任务也是看这个图有没有环

一般top sort的时间复杂度为O（E+V） 因为graph里的每一个
edge 和vertex 都要访问
*/
class Solution {
    Set<Integer> visited = new HashSet<>();
    Set<Integer> visiting = new HashSet<>();
    HashMap<Integer, List<Integer>> map = new HashMap<>();
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int len = prerequisites.length;
        for(int i = 0; i < len; i++) {
            int[] current = prerequisites[i];
            map.putIfAbsent(current[0], new ArrayList<>());
            map.get(current[0]).add(current[1]);
        }
        for(int i = 0; i < numCourses; i++) {
            if(!visited.contains(i)) {
                boolean result = dfs(i);
                if(!result) return false;
            }
        }
        return true;
    }
    
    private boolean dfs(int newCourse) {
        if(visiting.contains(newCourse)) return false;
        visiting.add(newCourse);
        if(map.containsKey(newCourse)) {
            List<Integer> neighbors = map.get(newCourse);
            for(int eachClass : neighbors) {
                if(!visited.contains(eachClass)) {
                    boolean result = dfs(eachClass);
                    if(!result) return false;
                }
            }
        }
        visiting.remove(newCourse);
        visited.add(newCourse);
        return true;
    }
}
