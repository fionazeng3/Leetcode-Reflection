/*
LC 378 Kth Smallest Element in a Sorted Matrix
又是一道用堆来解的第k 大问题
这道题因为matrix 横竖两个方向都是从小到大排列的
所以可以先把左上角（最小数）放在堆里。然后每拉出来一个元素，
就在堆里加上它的右边和下边两个元素（如果还没有加入）

visited 用了一个boolean 2D 数组
*/

class Solution {
    // position class
    private class Position{
        int x, y;
        public Position(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public int kthSmallest(int[][] matrix, int k) {
        // construct a min heap
        Queue<Position> minHeap = new PriorityQueue<Position>((p1,p2) -> matrix[p1.y][p1.x] - matrix[p2.y][p2.x]);
        int n = matrix.length;
        // construct visited array
        boolean [][] isVisited = new boolean [n][n];
        // add upper left corner
        minHeap.offer(new Position(0,0));
        isVisited[0][0] = true;

        // poll and offer k - 1 times
        for (int i = 0; i < k - 1; i++) {
            Position currentPosition = minHeap.poll();
            // add the right element
            if(currentPosition.x + 1 < n && !isVisited[currentPosition.y][currentPosition.x + 1]) {
                minHeap.offer(new Position(currentPosition.x + 1, currentPosition.y));
                isVisited[currentPosition.y][currentPosition.x + 1] = true;
            }
            // add lower elements
            if(currentPosition.y + 1 < n && ! isVisited[currentPosition.y + 1][currentPosition.x])  {
                minHeap.offer(new Position(currentPosition.x, currentPosition.y + 1));
                isVisited[currentPosition.y + 1][currentPosition.x] = true;
            }
        }
        // get the kth element
        Position finalPosition = minHeap.peek();
        return matrix[finalPosition.y][finalPosition.x];
    }
}
