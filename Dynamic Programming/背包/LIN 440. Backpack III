/*
LIN 440. Backpack III
其实这道题跟backpack II 一模一样，
唯一不同的一点是每一个element 都可以有无限个
backpack II 的转移方程是这样的
f[i][w] = max{f[i-1][w], f[i-1][w-Ai-1] + Vi-1 | w≥Ai-1 且f[i-1][w-Ai-1] ≠-1}
那backpack III 就是这样的 
f[i][w] = max{f[i-1][w], f[i-1][w-Ai-1] + Vi-1, f[i-1][w-2Ai-1] + 2Vi-1,...}
这个式子其实可以简化成
f[i][w] =         max{f[i-1][w],    f[i][w-Ai-1] + Vi-1}
用前i种物品         用前i-1种物品拼出     用前i种物品拼出重量w-Ai-1时最大总价值 
拼出重量w时         重量为w时最大总价值
最大总价值

*/
public class Solution {
    /**
     * @param A: an integer array
     * @param V: an integer array
     * @param m: An integer
     * @return: an array
     */
    public int backPackIII(int[] A, int[] V, int m) {
        // write your code here
        int result = 0;
        int len = A.length;
        int[][]f = new int[len + 1][m + 1];
        for(int i = 0; i <= len; i++) {
            for (int w = 0; w <= m; w++) {
                f[i][w] = -1;
            }
        }
        for(int i = 0; i <= len; i++) {
            f[i][0] = 0;
        }
        for (int i = 1; i <= len; i++) {
            for (int w = 1; w <= m; w++) {
                f[i][w] = f[i - 1][w];
                if(w >= A[i - 1] && f[i][w - A[i - 1]] >= 0) {
                    f[i][w] = Math.max(f[i][w], f[i][w - A[i - 1]] + V[i - 1]);
                }
                if(i == len) result = Math.max(result, f[i][w]);
            }
        }
        return result;
    }
}
