/*
LC 322. Coin Change
1. 确定状态： 最后一步可能是1， 2， 5
假设 f[x]为最少用多少枚硬币拼出X
2. 转移方程：
f[x] = min{f[x - 1] + 1, f[x - 2] + 1, f[x - 5] + 1}
3. 边界情况f[0] = 0
注意有很多拼不出来的情况直接用INF 表示
时间复杂度O（X * 硬币种类）
*/
class Solution {
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int[] f = new int[amount + 1];
        f[0] = 0;
        for(int i = 1; i <= amount; i++) {
            f[i] = Integer.MAX_VALUE;
            for(int j = 0; j < n; j++) {
                if(i >= coins[j] && f[i - coins[j]] != Integer.MAX_VALUE) {
                    f[i] = Math.min(f[i], f[i - coins[j]] + 1);
                }
            }
        }
        return f[amount] == Integer.MAX_VALUE ? -1 : f[amount];

    }
}
