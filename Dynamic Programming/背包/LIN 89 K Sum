/*
LIN 89 K Sum
这是一道背包型的马甲题。但是因为有限制用k数字， 所以可以在f 加一个维度k
状态:f[i][k][s]表示有多少种方法可以在前i个数中选出k个,使得它们的和是s
转移方程还是在讨论加不加上A（i- 1）
转移方程:f[i][k][s] = f[i-1][k][s] + f[i-1][k-1][s-Ai-1]|k>=1 AND s>=Ai-1
f[i-1][k][s]： 前i- 1个物品中用k拼出s 的方案（本次不带A（i- 1）玩）
f[i-1][k-1][s-Ai-1]|k>=1 AND s>=Ai-1： 前i- 1个物品中用k-1 拼出s 的方案（这次带Ai-1玩）
• 初始条件:
– f[0][0][0] = 1
– f[0][0][s] = 0, s = 1, 2, ..., Target
• 计算顺序:
– f[0][0~K][0~Target]
– ...
– f[N][0~K][0~Target]
*/
public class Solution {
    /**
     * @param A: An integer array
     * @param k: A positive integer (k <= length(A))
     * @param target: An integer
     * @return: An integer
     */
    public int kSum(int[] A, int k, int target) {
        // write your code here
        int len = A.length;
        int[][][] f = new int[len + 1][k+ 1][target + 1];
        f[0][0][0] = 1;
        for (int i = 1; i <= target; i++) {
            f[0][0][i] = 0;
        }
        for(int i = 1; i <= len; i++) {
            for(int K = 0; K <= k; K++) {
                for(int t = 0; t <= target; t++) {
                    f[i][K][t] = f[i - 1][K][t];
                    if(K >= 1 && t >= A[i - 1]) {
                        f[i][K][t] += f[i- 1][K-1][t - A[i - 1]];
                    }
                }
            }
        }
        return f[len][k][target];
    }
}
