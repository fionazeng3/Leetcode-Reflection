/*
LC 486. Predict the Winner
这是一道博弈型dp
博弈型dfs 都是把游戏从后往前玩。因为这样一是好定义
base case， 二是只有时间倒流， 每次玩家才有选择的机会
（如果从前往后玩的话已经选走的element 就不能再选了）

就这道题而言， 思路跟Coins in a Line II 是一样的
都是记录跟对手的最大差
1. 确定状态
设dp[i][j]为玩家在面对nums[i ...j] 时跟对手最大的分数差
2. 转移方程
dp[i][j] = max{nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1]}
3. 初始条件与运算顺序
首先， 先初始dp[x][x] = nums[x]
然后画出表格找运算顺序就好了
画表格会对运算顺序的定义很有帮助
*/
class Solution {
    public boolean PredictTheWinner(int[] nums) {
        int len = nums.length;
        int[][] dp = new int[len][len];
        for(int i = 0; i < len; i++) {
            dp[i][i] = nums[i];
        }
        for(int s = len - 2; s >= 0; s--) {
            for(int e = s + 1; e < len; e++) {
                dp[s][e] = Math.max(nums[s] - dp[s + 1][e], nums[e] - dp[s][e-1]);
            }
        }
        return dp[0][len - 1] >= 0;
    }
}
