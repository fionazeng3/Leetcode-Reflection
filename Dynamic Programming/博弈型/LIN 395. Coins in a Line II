/*
LIN 395. Coins in a Line II
对于先手x 来说， 他所要做到的就是让自己的数字比对方大
设f[i]为一方在面对a[i..n-1]这些数字时,能得到的最大的与对手的数字差
转移方程:f[i] = max{a[i] - f[i+1], a[i] + a[i + 1] - f[i + 2]}

要理解这个转移方程， 运算顺序非常重要。
一般博弈型动态规划都是从游戏结束开始， 倒着推。
所以 初始条件:f[n] = 0。 计算顺序:f[n], f[n-1], ..., f[0]

转移方程为什么成立呢？ 游戏的每一步都做对自己最有利的一步。
如果这一步只选了一个数字 a[i]，那么上一次对手玩的结果
就肯定在 f[i+1]。 如果选了两个数字， a[i] + a[i + 1]， 那么上次对手
玩的结果就肯定在f[i + 2]。 也就是说上一步决定下一步（因为游戏倒着玩的）。
*/
public class Solution {
    /**
     * @param values: a vector of integers
     * @return: a boolean which equals to true if the first player will win
     */
    public boolean firstWillWin(int[] values) {
        // write your code here
        int len = values.length;
        int[] helper = new int[len + 1];
        helper[len] = 0;
        for (int i = len - 1; i >= 0; i--) {
            helper[i] = values[i] - helper[i + 1];
            if(i != len - 1) {
                helper[i] = Math.max(helper[i], values[i] + values[i + 1] - helper[i + 2]);
            }
        }
        return helper[0] >= 0;
    }
}
