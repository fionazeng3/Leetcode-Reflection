/*
LC 198. House Robber
一道简单的动态规划问题
转移方程是 f[i] = max{f[i - 1], nums[i] + f[i - 2]}
一定要注意初始条件。 f[0] = 0 f[1] = nums[0]
如果让f[0] = nums[0], f[1] = nums[1]
那么f[1]就不一定选的是对的， 从而影响到后面的答案
*/
public class Solution {
    /**
     * @param A: An array of non-negative integers.
     * return: The maximum amount of money you can rob tonight
     */
    public int rob(int[] A) {
        int n = A.length;
        if (n == 0)
            return 0;
        int []res = new int[n+1];

        res[0] = 0;
        res[1] = A[0];
        for (int i = 2; i <= n; i++) {
            res[i] = Math.max(res[i-1], res[i-2] + A[i-1]);
        }
        return res[n];
    }
}
