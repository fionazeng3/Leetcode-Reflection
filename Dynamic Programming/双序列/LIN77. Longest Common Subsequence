/*
LIN77. Longest Common Subsequence
设f[i][j]为A前i个字符A[0..i-1]和B前j个字符[0..j-1]的最长公共子序列的长度
转移方程就是f[i][j] = max{f[i-1][j], f[i][j-1], f[i-1][j-1]+1|A[i-1]=B[j-1]}
怎么理解这个转移方程呢？ f[i -1][j]就是A 去掉当前尾巴以后， 最长公共子序列长度
f[i][j - 1]就是B去掉当前尾巴以后， 最长公共子序列长度
f[i-1][j-1]+1|A[i-1]=B[j-1] 就是在A 和B 都去掉尾巴以后的基础上加上当前字母相不相等
那么初始值就是f[0][j] = 0, j=0..n， f[i][0] = 0, i=0..m。 道理很简单， 两个string 0～0
都是没有字母的， 所以方程设置为0
计算顺序:
f[0][0..n-1]
...
f[m-1][0..n-1]
因为你在算每一个f[i] 的时候要知道f[i - 1][j], f[i][j - 1], f[i - 1][j-1]
*/
public class Solution {
    /**
     * @param A: A string
     * @param B: A string
     * @return: The length of longest common subsequence of A and B
     */
    public int longestCommonSubsequence(String A, String B) {
        int Alen = A.length();
        int Blen = B.length();
        int[][] f = new int[Alen + 1][Blen + 1];
        // f[x][0] = 0;
        for (int i = 0; i <= Blen; i++) {
            f[0][i] = 0;
        }
        // f[0][x] = 0
        for (int i= 0; i <= Alen; i++) {
            f[i][0] = 0;
        }
        for(int i = 1; i <= Alen; i++) {
            for(int j = 1; j <= Blen; j++){
                f[i][j] = Math.max(f[i - 1][j], f[i][j -1]);
                if(A.charAt(i - 1) == B.charAt(j - 1)) {
                    f[i][j] = Math.max(f[i][j], f[i - 1][j - 1] + 1);
                }
            }
        }
        return f[Alen][Blen];
    }
}
