/*
LC 361. Bomb Enemy
1. 确定状态： 如果只能向上爆炸，
那假设每一个格子都能放炸弹， 那么如果当前格子是
空地： 不会炸死任何人， 炸弹向上延伸
墙： 不会炸死任何人， 并且阻断
敌人： 炸死当前敌人并向上延伸
那么up[j][i]表示 在（i, j）放一个炸弹， 向上能炸死多少人
2. 转移方程
up[j][i] = up[j - 1][i] 如果当前是空地
          up[j - 1][i] + 1 如果当前是敌人
          0 如果当前是墙

3. 初始条件 up[0][j] = 0 如果当前是空地
          up[0][j] = 1 如果当前是敌人
最后求了四个方向的再加起来就好
中间的值不会重复加。 因为我们只遇到空地才会算加和
*/
class Solution {
    public int maxKilledEnemies(char[][] grid) {
        if(grid == null || grid.length == 0 || grid[0].length == 0) return 0;
        int m = grid.length;
        int n = grid[0].length;
        int[][] up = new int[m][n];
        int[][] down = new int[m][n];
        int[][] left = new int[m][n];
        int[][] right = new int[m][n];
        int res = 0;
        // up
        for(int j = 0; j < m; j++) {
            for(int i = 0; i < n; i++) {
                if(grid[j][i] == 'W') {
                    up[j][i] = 0;
                    continue;
                }
                up[j][i] = grid[j][i] == 'E' ? 1 : 0;
                if(j >0) {
                    up[j][i] += up[j - 1][i];
                }
            }
        }
        // down
        for(int j = m - 1; j >= 0; j--) {
            for(int i = 0; i < n; i ++) {
                if(grid[j][i] == 'W') {
                    down[j][i] = 0;
                    continue;
                }
                down[j][i] = grid[j][i] == 'E' ? 1 : 0;
                if(j < m-1) {
                    down[j][i] += down[j + 1][i];
                }
            }
        }
        // left
        for(int j = 0; j < m; j++) {
            for(int i = 0; i < n; i ++) {
                if(grid[j][i] == 'W') {
                    left[j][i] = 0;
                    continue;
                }
                left[j][i] = grid[j][i] == 'E' ? 1 : 0;
                if(i >0) {
                    left[j][i] += left[j][i - 1];
                }
            }
        }

        // right
        for(int j = 0; j < m; j++) {
            for(int i = n - 1; i >= 0; i--) {
                if(grid[j][i] == 'W') {
                    right[j][i] = 0;
                    continue;
                }
                right[j][i] = grid[j][i] == 'E' ? 1 : 0;
                if(i < n -1) {
                    right[j][i] += right[j][i + 1];
                }
            }
        }
        // 不会把中间的数加三遍。 因为中间是空地
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(grid[j][i] == '0') {
                    int current = up[j][i] + down[j][i] + left[j][i] + right[j][i];
                    res = Math.max(res, current);
                }
            }
        }
        return res;
    }
}
