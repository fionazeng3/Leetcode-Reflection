/*
LIN 631. Maximal Square II
首先想转移方程， 最后最大的变长是怎么算出来的？

对角线1正方形右下角是1

• 设左边连续0的个数为a

• 设上边连续0的个数为b

• 设以左上格为右下角的最大对角线1正方形边长是c

• 答案是min{a, b, c} + 1

运算顺序和初始值： 同上面两道题， 初始最上和最左的边，
中间element 用转移方程算

用滚动数组优化空间复杂度
*/
public class Solution {
    /**
     * @param matrix: a matrix of 0 an 1
     * @return: an integer
     */
    public int maxSquare2(int[][] matrix) {
        int y = matrix.length;
        int x = matrix[0].length;
        int[][]helper = new int[2][x];
        int old = 0, now = 0;
        int result = 0;
        // every column
        for (int j = 0; j < y; j++) {
            old = now;
            now = 1- now;
            // every row
            for (int i = 0; i < x; i++) {
                // on the edge
                if(i == 0 || j == 0) {
                    helper[now][i] = matrix[j][i];
                // inland elements
                } else {
                    if(matrix[j][i] == 0) {
                        helper[now][i] = matrix[j][i];
                    } else {
                        int leftLongest = computeLongest(matrix, i, j, -1);
                        int upLongest = computeLongest(matrix, i, j, 1);
                        int min = Math.min(leftLongest, upLongest);
                        int longestSquare = helper[old][i - 1];
                        min = Math.min(min, longestSquare);
                        helper[now][i] = min + 1;
                    }
                }
                result = Math.max(result, helper[now][i]);
            }
        }
        return result * result;
    }

    private int computeLongest(int[][] matrix, int i, int j, int type) {
        int result = 0;
        // go to left
        if(type == -1) {
            while(i - 1 >= 0 && matrix[j][i - 1] == 0) {
                result ++;
                i --;
            }
        // go up
        } else {
            while(j - 1 >= 0 && matrix[j - 1][i] == 0) {
                result ++;
                j --;
            }
        }
        return result;
    }
}
