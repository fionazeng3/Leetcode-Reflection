/*
LC 115. Distinct Subsequences
这道题要采用双序列型动态规划的模版来解
1. 确定状态
最后一步： B的每一个字符都必须出现在一个对子里所以这题的“最后一步”以B为出发点
情况1:B[n-1] = A[m-1]，结成对子
情况2:B[n-1]不和 A[m-1]结成对子
设f[i][j]为B前j个字符B[0..j-1]在A前i个字符A[0..i-1]中出现多少次
2. 转移方程
f[i][j] = f[i-1][j-1]|A[i-1]=B[j-1] + f[i-1][j]
            最后两个字母结对子              最后两个字母不结对子
3. 初始条件与计算顺序
– 如果B是空串，B在A中出现次数是1
– f[i][0] = 1 (i = 0, 1, 2, ..., m) 想象哪些情况会用到f[i][0] 不要瞎猜
– 如果A是空串而B不是空串，B在A中出现次数是0
– f[0][j] = 0 (j = 1, 2, ..., n)
• 初始化f[0][0], f[0][1], ..., f[0][n]
• f[1][0], f[1][1], ..., f[1][n]
•...
• f[m][0], f[m][1], ..., f[m][n]
• 答案是f[m][n]
• 时间复杂度(计算步数)O(MN)，空间复杂度(数组大小)O(MN) • 可以用滚动数组优化空间至O(N)
*/
class Solution {
    public int numDistinct(String s, String t) {
        char[] s1 = s.toCharArray();
        char[] s2 = t.toCharArray();
        int m = s1.length;
        int n = s2.length;
        int[][] f = new int[m + 1][n+1];
        for(int i = 0; i <= m ; i++) {
            for(int j = 0; j <= n; j++) {
                if(j == 0) {
                    f[i][j] = 1;
                    continue;
                }
                if(i == 0) {
                    f[i][j] = 0;
                    continue;
                }
                f[i][j] = f[i - 1][j];
                if(s1[i  - 1] == s2[j - 1]) {
                    f[i][j] += f[i - 1][j - 1];
                }
            }
        }
        return f[m][n];
    }
}
