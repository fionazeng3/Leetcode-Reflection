/*
LC 44. Wildcard Matching
这道题属于双序列型动态规划
1. 确定状态
看B 的最后一个字符跟A 的最后一个字符是不是能匹配上
• 如果B[n-1]是一个正常字符(非?非*)，则如果A[m-1]=B[n-1]，能否匹
配取决于A[0..m-2]和B[0..n-2]是否匹配;否则不能匹配
• 如果B[n-1]是’?’，则A[m-1]一定是和’?’匹配，之后能否匹配取决于
A[0..m-2]和B[0..n-2]是否匹配
• 如果B[n-1]是’*’，它可以匹配0个或任意多个字符，需要考虑A[m-1]有没
有被这个*匹配
– A[m-1]不被‘*’匹配，能否匹配取决于A[0..m-1]和B[0..n-2]是否匹配 – A[m-1]被‘*’匹配，能否匹配取决于A[0..m-2]和B[0..n-1]是否匹配
设f[i][j]为A前i个字符A[0..i-1]和B前j个字符B[0..j-1]能否匹配

2. 转移方程
f[i][j] = f[i-1][j-1]，如果B[j-1]=‘?’或者A[i-1]=B[j-1] (B 的最后一个字符不是*)
          最后一个字符相等           B的最后一个字符是？
f[i-1][j] OR f[i][j-1]，如果B[j-1]=‘*’
砍掉A的尾巴    把B 的* 去掉
3. 初始条件和计算顺序
• 空串和空Wildcard匹配:f[0][0] = TRUE • 空的Wildcard不能匹配长度>0的串
– f[1][0] = ... = f[m][0] = FALSE
• f[0][1..n]也用动态规划计算，但是因为没有A[-1]，所以只能用第二种情 况中的f[i][j-1]
• f[0][0], f[0][1], ..., f[0][n]
• f[1][0], f[1][1], ..., f[1][n]
•...
• f[m][0], f[m][1], ..., f[m][n]
• 答案是f[m][n]
• 时间复杂度(计算步数)O(MN)，空间复杂度(数组大小)O(MN) • 可以用滚动数组优化空间至O(N)
*/
class Solution {
    public boolean isMatch(String s, String p) {
        char[] A = s.toCharArray();
        char[] B = p.toCharArray();
        int m = A.length;
        int n = B.length;
        boolean[][] f = new boolean[m + 1][n+1];
        for(int i = 0; i <= m; i++) {
            for(int j = 0; j <= n; j++) {
                if(i == 0 && j == 0) {
                    f[i][j] = true;
                    continue;
                }
                if(j == 0) {
                    f[i][j] = false;
                    continue;
                }
                f[i][j] = false;
                if(B[j - 1] != '*') {
                    if(i > 0 && (B[j - 1] == '?' || A[i - 1]== B[j - 1])) {
                        f[i][j] |= f[i - 1][j-1];
                    }
                } else {
                    f[i][j] |= f[i][j - 1];
                    if(i > 0) f[i][j] |= f[i - 1][j];
                }
            }
        }
        return f[m][n];
    }
}
