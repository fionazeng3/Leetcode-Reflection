/*
LC 10. Regular Expression Matching
这道题也是一个比较经典的双序列型动态规划问题
1. 确定状态 考虑A 和B 的最后一个字符是不是matching
• 如果B[n-1]是一个正常字符(非.非*)，则如果A[m-1]=B[n-1]，能否匹配
取决于A[0..m-2]和B[0..n-2]是否匹配;否则不能匹配
• 如果B[n-1]是’.’，则A[m-1]一定是和’.’匹配，之后能否匹配取决于A[0..m-2]
和B[0..n-2]是否匹配
• 如果B[n-1]是’*’，它代表B[n-2]=c可以重复0次或多次，它们是一个整体c*，
需要考虑A[m-1]是0个c，还是多个c中的最后一个
– A[m-1]是0个c，能否匹配取决于A[0..m-1]和B[0..n-3]是否匹配(把B 中的c* 直接撇去)
– A[m-1]是多个c中的最后一个，能否匹配取决于A[0..m-2]和B[0..n-1]是否匹配 • 这种情况必须A[m-1]=c或者c=‘.’
设f[i][j]为A前i个字符A[0..i-1]和B前j个字符B[0..j-1]能否匹配
2. 转移方层
f[i][j] = f[i-1][j-1]，如果B[j-1]=‘.’或者A[i-1]=B[j-1]
f[i][j] = f[i][j-2] OR (f[i-1][j] AND (B[j-2]=‘.’ OR B[j-2]=A[i-1]))，如果B[j-1]=‘*’
3. 初始条件及计算顺序
空串和空正则表达式匹配:f[0][0] = TRUE
空的正则表达式不能匹配长度>0的串
– f[1][0] = ... = f[m][0] = FALSE
注意:f[0][1..n]也用动态规划计算，但是因为没有A[-1]，所以只能用第 二种情况中的f[i][j-2]
• f[0][0], f[0][1], ..., f[0][n]
• f[1][0], f[1][1], ..., f[1][n]
•...
• f[m][0], f[m][1], ..., f[m][n]
时间复杂度(计算步数)O(MN)，空间复杂度(数组大小)O(MN)
*/
class Solution {
    public boolean isMatch(String ss, String pp) {
        char[] s = ss.toCharArray();
        char[] p = pp.toCharArray();
        int m = s.length;
        int n = p.length;
        boolean[][] f = new boolean[m + 1][n+1];
        for(int i = 0; i<= m; i++) {
            for(int j = 0; j <= n; j++) {
                if(i == 0 && j == 0) {
                    f[i][j] = true;
                    continue;
                }
                if(j == 0) {
                    f[i][j] = false;
                    continue;
                }
                f[i][j] = false;
                if(p[j - 1] != '*') {
                    if(i > 0 && (p[j - 1] == '.' || p[j - 1] == s[i - 1])) f[i][j] = f[i - 1][j - 1];
                } else {
                    if(j > 1) f[i][j] |= f[i][j - 2];
                    if(i > 0 && j > 1) {
                        if(p[j - 2] == '.' || p[j -2] == s[i - 1]) f[i][j] |= f[i - 1][j];
                    }
                }
            }
        }
        return f[m][n];
    }
}
