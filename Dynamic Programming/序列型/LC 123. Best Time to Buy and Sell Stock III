/*
LC 123. Best Time to Buy and Sell Stock III
这道题的详细解释可以参考九章dp 班lecture 3
1. 确定状态
最后一步肯定发生在第N 天。 当时买家可以处于状态1， 3， 5
f[i][j] 表示在前i 天， 状态为j 的情况下最大收益是多少
2. 转移方程
情况一： 手中没有股票
f[i][j] = max{f[i-1][j], f[i-1][j-1] + Pi-1 – Pi-2}
              昨天没有持有股票             昨天持有股票， 今天清仓
情况二： 手中有股票
f[i][j] = max{f[i-1][j] + Pi-1 – Pi-2, f[i-1][j-1]}
              昨天就有股票，持续获利         昨天没有股票
3. 初始条件以及计算顺序
f[0][1] = 0
f[0][2] = f[0][3] = f[0][4] = f[0][5] = -∞
时间复杂度 O（N） 空间复杂度O（N）
*/
class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        if(n == 0) return 0;
        int[][]f = new int[n + 1][5+1];
        f[0][1] = 0;
        for(int i = 2; i <= 5; i++) {
            f[0][i] = Integer.MIN_VALUE;
        }
        for(int i = 1; i<= n; i++) {
            for(int j = 1; j <= 5; j+=2) {
                f[i][j] = f[i - 1][j];
                if(j > 1 && i >= 2 && f[i - 1][j - 1] != Integer.MIN_VALUE) {
                    f[i][j] = Math.max(f[i][j], f[i - 1][j - 1] + prices[i - 1] - prices[i - 2]);
                }
            }
            for(int j = 2; j <= 5; j+= 2) {
                f[i][j] = f[i - 1][j - 1];
                if(i >= 2 && f[i - 1][j] != Integer.MIN_VALUE) {
                    f[i][j] = Math.max(f[i][j], f[i - 1][j] + prices[i - 1] - prices[i - 2]);
                }
            }
        }
        return Math.max(f[n][1], Math.max(f[n][3], f[n][5]));
    }
}
