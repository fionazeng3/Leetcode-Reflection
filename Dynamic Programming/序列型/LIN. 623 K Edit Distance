/*
LIN. 623 K Edit Distance 
这道题其实可以用Edit distance 的方法一个一个比较
但是这样存在重复性。比如说target 是abc， pool 是
abcd abca abcc 这个会重复计算abc 到abc 的距离
所以， 建立trie， 一样的前缀只计算一遍。

设置f[sP][j]为前缀sP(即节点P对应的字符串)和T前j个字符的最小编辑距离
设P的父亲是Q
那么变化情况有以下几种：
Replace：f[sQ][j-1]+1 / f[i - 1] + 1
Insert：f[sP][j-1]+1 / newF[i - 1] + 1
Delete：f[sQ][j]+1 / f[i] + 1
Free lunch：f[sQ][j-1]|sP[last]=T[j-1 / f[i - 1]
转移方程是
f[sP][j-1]+1, f[sQ][j-1]+1, f[sQ][j]+1, f[sQ][j-1]|sP[last]=T[j-1]

计算顺序： 先把newF[i] 通过delete 的算式初始化一下， 然后再不断更新
*/
class TrieNode {
    TrieNode[] sons;
    String s;
    boolean isWord;

    // constructor
    public TrieNode() {
        sons = new TrieNode[26];
        isWord = false;
    }
    // insert function
    public static void insert(String word, TrieNode p) {
        char[] c = word.toCharArray();
        int len = c.length;
        for (int i = 0; i < len; i++) {
            int index = c[i] - 'a';
            if(p.sons[index] == null) p.sons[index] = new TrieNode();
            p = p.sons[index];
        }
        p.isWord = true;
        p.s = word;
    }
}
public class Solution {
    int targetLen;
    int K;
    char[] destination;
    List<String> res;

    /**
     * @param words: a set of stirngs
     * @param target: a target string
     * @param k: An integer
     * @return: output all the strings that meet the requirements
     */
    public List<String> kDistance(String[] words, String target, int k) {
        TrieNode root = new TrieNode();
        destination = target.toCharArray();
        K = k;
        targetLen = destination.length;
        res = new ArrayList<>();
        int[] f = new int[targetLen + 1];
        for (int i = 0; i < words.length; i++) {
            TrieNode.insert(words[i], root);
        }
        for (int i = 0; i <= targetLen; i++) {
            f[i] = i;
        }
        dfs(root, f);
        return res;
    }

    private void dfs(TrieNode current, int[]f) {
        int[] newF = new int[targetLen + 1];
        if(current.isWord && f[targetLen] <= K) res.add(current.s);
        for (int c = 0; c < 26; c++) {
            if(current.sons[c] == null) continue;
            // delete
            for(int i = 0; i <= targetLen; i++) {
                newF[i] = f[i] + 1;
            }
            for (int i = 1; i <= targetLen; i++) {
                //replace
                newF[i] = Math.min(newF[i], f[i - 1] + 1);
                // free lunch
                 if(c == destination[i - 1] - 'a') newF[i] = Math.min(newF[i], f[i - 1]);
                // insert
                newF[i] = Math.min(newF[i], newF[i - 1] + 1);
            }
            dfs(current.sons[c], newF);
        }
    }
}
