/*
LC 256. Paint House
1. 确定状态最后一步： 最后一栋房子被漆成红或蓝或绿
2. 转移方程
􏱑􏱒􏱄􏱑f[i][x] 前 i 栋房子并且第 i-1 栋房子的颜色为x 的最小花费
f[i][0] = min{f[i-1][1] + cost[i-1][0], f[i-1][2] + cost[i-1][0]}
f[i][1] = min{f[i-1][0] + cost[i-1][1], f[i-1][2] + cost[i-1][1]}
f[i][2] = min{f[i-1][0] + cost[i-1][2], f[i-1][1] + cost[i-1][2]}
*/
class Solution {
    public int minCost(int[][] costs) {
        int n = costs.length;
        int[][] f = new int[n +1][3];
        for(int i = 0; i < 3; i++) {
            f[0][i] = 0;
        }
        for(int i = 1; i <= n; i++) {
            for(int j = 0; j < 3; j++) {
                f[i][j] = Integer.MAX_VALUE;
                for(int k = 0; k < 3; k++) {
                    if(k != j) {
                        f[i][j] = Math.min(f[i][j], f[i - 1][k] + costs[i - 1][j]);
                    }
                }

            }
        }
        return Math.min(f[n][0], Math.min(f[n][1], f[n][2]));
    }
}
