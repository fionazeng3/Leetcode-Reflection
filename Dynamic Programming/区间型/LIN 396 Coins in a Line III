/*
LIN 396 Coins in a Line III
这道题是区间加博弈型dp
博弈型dp 需要把游戏过程倒着玩
设f[i][j]为一方先手在面对a[i..j]这些数字时,能得到的最大的与对手的
数字差—区间型动态规划。 那么转移方程 就是f[i][j] = max{a[i] - f[i+1][j], a[j] - f[i][j-1]}
初始条件:f[i][i] = a[i]。 这是在最后只面对一个element 的时候的情况
计算顺序套用区间型dp 模版， 逐渐增加长度
– 长度1:f[0][0], f[1][1], f[2][2], ..., f[N-1][N-1]
– 长度2: f[0][1], ..., f[N-2][N-1]
– ...
– 长度N: f[0][N-1]
如果f[0][N-1]>=0,先手Alice必赢,否则必输
*/
public class Solution {
    /**
     * @param values: a vector of integers
     * @return: a boolean which equals to true if the first player will win
     */
    public boolean firstWillWin(int[] values) {
       int len = values.length;
       // when facing a[i ... j] the biggest
       // difference with opponent
       int[][] f = new int[len][len];
       // initialize last step of the game
       for (int i = 0; i < len; i++) {
           f[i][i] = values[i];
       }
       //main loop
       for (int interval = 2; interval <= len; interval++) {
           for (int i = 0; i <= len - interval; i++) {
               int j = i + interval - 1;
               f[i][j] = Math.max(values[i] - f[i + 1][j], values[j] - f[i][j - 1]);
           }
       }
       return f[0][len - 1] > 0;

    }
}
