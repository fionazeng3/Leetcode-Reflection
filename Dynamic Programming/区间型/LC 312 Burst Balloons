/*
LC 312 Burst Balloons
这是一道区间型dp的典型题
区间行dp 首先考虑一下最后一步是长什么样的
扎破i时,左边是气球0,右边是气球N+1,获得金币1*ai*1=ai
假设最后一个被扎破的气球编号是i
此时气球1~i-1以及i+1~N都已经被扎破,并且已经获得对应金币
开一个二位数组f， f[i][j]为扎破i+1~j-1号所有气球,最多获得的金币数
那么这题的转移方程 是
f[i][j] = max{f[i][j], f[i][k] + f[k][j] + a[i] * a[k] * a[j]}
k 指针从i + 1 走到j - 1
初始状态和转移方程是：
首先把f[0][1] = f[1][2] = ... = f[N][N+1] 设置为0 （中间没有任何气球）
然后计算顺序就是interval 逐渐扩大
– f[0][1], f[1][2], f[2][3], ..., f[N][N+1]
– f[0][2], f[1][3], f[2][4], ..., f[N-1][N+1]
– ...
– f[0][N+1]
*/
class Solution {
    public int maxCoins(int[] nums) {
        int len = nums.length;
        int[] newArray = new int[len + 2];
        len += 2;
        // construct the array
        newArray[0] = newArray[len -1] = 1;
        for(int i = 1; i < len - 1; i++) {
            newArray[i] = nums[i - 1];
        }
        int[][] f = new int[len][len];
        // initialize
        for (int i = 0;i < len - 1; i++) {
            f[i][i + 1] = 0;
        }
        //main loop
        for(int interval = 3; interval <= len; interval++) {
            for (int i = 0; i <= len - interval; i++) {
                int j = i + interval - 1;
                f[i][j] = 0;
                for (int k = i + 1; k < j; k++) {
                    f[i][j] = Math.max(f[i][j] , f[i][k] + f[k][j] + newArray[i] * newArray[j] * newArray[k]);
                }
            }
        }
        return f[0][len - 1];
    }
}
