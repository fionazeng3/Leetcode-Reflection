/*
LC 516. Longest Palindromic Subsequence
这是一道典型的区间型动态规划
1. 确定状态：
要求S[i..j]的最长回文子串
如果S[i]=S[j]，需要知道S[i+1..j-1]的最长回文子串
否则答案是S[i+1..j]的最长回文子串或S[i..j-1]的最长回文子串 • 子问题
状态:设f[i][j]为S[i..j]的最长回文子串的长度
2. 转移方程
f[i][j] = max{f[i+1][j], f[i][j-1], f[i+1][j-1] + 2|S[i]=S[j]}
                去头       去尾          去头又去尾
3. 初始条件及运算顺序
这道题应该按子串的长度顺序计算
• 长度1:f[0][0], f[1][1], f[2][2], ..., f[N-1][N-1] • 长度2: f[0][1], ..., f[N-2][N-1]
•...
• 长度N:f[0][N-1]
• 答案是f[0][N-1]
• 时间复杂度O(N2)，空间复杂度O(N2)
*/
class Solution {
    public int longestPalindromeSubseq(String ss) {
        char[] s = ss.toCharArray();
        int n = s.length;
        int[][] f = new int[n][n];
        if(n == 0) return 0;
        // len 1
        for(int i = 0; i < n; i++) {
            f[i][i] = 1;
        }
        // len2
        for(int i = 0; i < n -1; i++) {
            f[i][i+1] = (s[i] == s[i + 1]) ? 2:1;
        }
        // len 3 and beyond
        for(int len = 3; len <= n; len++) {
            for(int i = 0; i<= n - len; i++) {
                int j = i+ len - 1;
                f[i][j] = Math.max(f[i+1][j], f[i][j - 1]);
                if(s[i] == s[j]) f[i][j] = Math.max(f[i][j], f[i+1][j-1] + 2);
            }
        }
        return f[0][n - 1];
    }
}
