/*
LC 706. Design HashMap
这道题就用经典的implement 方法就好了
我用到的是seperate chaining
*/
class Node {
    int key;
    int val;
    Node next;
    public Node(int key, int val) {
        this.key = key;
        this.val = val;
    }
}

class MyHashMap {
    private int mapSize;
    private Node[] map;

    /** Initialize your data structure here. */
    public MyHashMap() {
        this.mapSize = 100;
        map = new Node[mapSize];
    }

    private int getIndex(int key) {
        return key % this.mapSize;
    }

    /** value will always be non-negative. */
    public void put(int key, int value) {
        int index = getIndex(key);
        if(map[index] == null) {
            map[index] = new Node(key, value);
            return;
        }
        Node current = map[index];
        Node nextNode = current.next;
        while(current != null && nextNode != null) {
            if(current.key == key) {
               current.val = value;
               return;
            }
            current = current.next;
            nextNode = nextNode.next;
        }
        if(current.key == key) {
            current.val = value;
        } else {
            current.next = new Node(key, value);
        }

    }

    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        int index = getIndex(key);
        Node current = map[index];
        while(current != null) {
            if(current.key == key) return current.val;
            current = current.next;
        }
        return -1;
    }

    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
        int index = getIndex(key);
        if(map[index] == null) return;
        if(map[index].key == key) {
            map[index] = map[index].next;
            return;
        }
        Node current = map[index];
        while(current.next != null) {
            if(current.next.key == key) {
                current.next = current.next.next;
                return;
            }
            current = current.next;
        }

    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */
