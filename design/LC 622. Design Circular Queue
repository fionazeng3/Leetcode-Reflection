/*
LC 622. Design Circular Queue
这道题用一个array和两个pointer
一个front 一个rear。 rear 在enqueue 的时候
rear++。 front 在dequeue 的时候++
*/
class MyCircularQueue {
    int[] bank;
    int front;
    int rear;
    int size;
    int k;
    /** Initialize your data structure here. Set the size of the queue to be k. */
    public MyCircularQueue(int k) {
        this.bank = new int[k];
        this.front = 0;
        this.rear = 0;
        this.size = 0;
        this.k = k;
    }

    /** Insert an element into the circular queue. Return true if the operation is successful. */
    public boolean enQueue(int value) {
        if(size >= k) return false;
        if(rear >= k) {
            rear = 0;
        }
        size++;
        bank[rear] = value;
        rear++;
        return true;
    }

    /** Delete an element from the circular queue. Return true if the operation is successful. */
    public boolean deQueue() {
        if(size == 0) return false;
        front++;
        if(front >= k) front = 0;
        size--;
        return true;
    }

    /** Get the front item from the queue. */
    public int Front() {
        if(size == 0) return -1;
        return bank[front];
    }

    /** Get the last item from the queue. */
    public int Rear() {
        if(size == 0) return -1;
        int index = rear - 1;
        if(index < 0) index = k-1;
        return bank[index];
    }

    /** Checks whether the circular queue is empty or not. */
    public boolean isEmpty() {
        return size == 0;
    }

    /** Checks whether the circular queue is full or not. */
    public boolean isFull() {
        return size == k;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
