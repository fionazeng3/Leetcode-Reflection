/*
LIN 543 Kth Largest in N Arrays
在2D array 中找出第k 大元素。
我这里用到的是maxheap 的方法
首先把每一个row 排序， 然后把每一个row 中最后一个（最大）
元素放在maxheap 里面。 poll k-1 次， 每次poll 的时候加入
该行左边的元素。 最后peek 到的值就是第k 大元素

要注意的点：
注意建立max heap 的方法
Queue<Position> helper = new PriorityQueue<Position>((p1, p2) -> arrays[p2.y][p2.x] - arrays[p1.y][p1.x]);
用lambda 表达式把比较的两个元素反过来就好了

注意因为每次poll 之后需要直到当前元素在array 中的位置， 所以
建立一个position class 会让代码简洁很多
*/
public class Solution {

    private class Position {
        int x, y;
        public Position(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
    /**
     * @param arrays: a list of array
     * @param k: An integer
     * @return: an integer, K-th largest element in N arrays
     */
    public int KthInArrays(int[][] arrays, int k) {
        // construct a max heap
        Queue<Position> helper = new PriorityQueue<Position>((p1, p2) -> arrays[p2.y][p2.x] - arrays[p1.y][p1.x]);
        // sort each array
        int y = arrays.length;
        // sort each array
        for (int j = 0; j < y; j++) {
            Arrays.sort(arrays[j]);
        }
        // put the last element of every array into max heap
        for (int j = 0; j < y; j++) {
            int x = arrays[j].length;
            if(x > 0) helper.offer(new Position(x - 1, j));
        }
        for (int i = 0; i < k - 1; i++){
            Position currentPosition = helper.poll();
            if(currentPosition.x - 1 >= 0) helper.offer(new Position(currentPosition.x - 1, currentPosition.y));

        }
        Position finalPosition = helper.peek();
        return arrays[finalPosition.y][finalPosition.x];
    }
}
