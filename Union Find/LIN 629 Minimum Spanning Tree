/*
LIN 629 Minimum Spanning Tree
minimum spanning tree 的模版题。用到的是kruscal's algorithm
mst 的意思是给你一堆有weight 的edge。 问你怎么在cost 最小的情况下
把所有node 连起来。 算法很简单， 先把edge 排序， 然后一个edge 一个edge
看， 如果两个node 已经在一个集合了， 就删除这个edge。
最后要检查一下所有node 是不是都在一个集合里了

注意这道题因为排序要求比较多， 所以另建立了一个comparator
注意一下这个interface 是怎么写的
*/
/**
 * Definition for a Connection.
 * public class Connection {
 *   public String city1, city2;
 *   public int cost;
 *   public Connection(String city1, String city2, int cost) {
 *       this.city1 = city1;
 *       this.city2 = city2;
 *       this.cost = cost;
 *   }
 * }
 */
public class Solution {
    Map<String, String> father;
    /**
     * @param connections given a list of connections include two cities and cost
     * @return a list of connections from results
     */
     // mian function
    public List<Connection> lowestCost(List<Connection> connections) {
        // initialize
        father = new HashMap<>();
        Collections.sort(connections, comp);
        List<Connection> result = new ArrayList<>(connections);
        for (Connection eachC : result) {
            String c1 = eachC.city1;
            String c2 = eachC.city2;
            father.putIfAbsent(c1, c1);
            father.putIfAbsent(c2,c2);
        }
        int totalSize = father.keySet().size();
        // traverse and Process
        for (Connection eachC : connections) {
            String c1 = eachC.city1;
            String c2 = eachC.city2;
            String root1 = find(c1);
            String root2 = find(c2);
            // not the same set
            if(!root1.equals(root2)) {
                union(c1, c2);
                totalSize --;
            // already the same set
            } else {
                result.remove(eachC);
            }
        }
        List<Connection> emptyList = new ArrayList<>();
        if(totalSize > 1) {
            return emptyList;
        }
        return result;
    }
    // comparator
    static Comparator<Connection> comp = new Comparator<Connection>() {
        public int compare(Connection c1, Connection c2) {
            if(c1.cost != c2.cost) {
                return c1.cost - c2.cost;
            } else if (!c1.city1.equals(c2.city1)) {
                return c1.city1.compareTo(c2.city1);
            } else {
                return c1.city2.compareTo(c2.city2);
            }
        }
    };
    // union
    public void union(String s1, String s2) {
        String r1 = find(s1);
        String r2 = find(s2);
        if(!r1.equals(r2)) {
            father.put(r1, r2);
        }
    }
    // find
    public String find(String s) {
        String boss = s;
        // find the boss
        while(!father.get(boss).equals(boss)) {
            boss = father.get(boss);
        }
        // path compression
        while (!s.equals(boss)) {
            String temp = father.get(s);
            father.put(s, boss);
            s = temp;
        }
        return boss;
    }
}
