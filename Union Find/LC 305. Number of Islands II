/*
LC 305. Number of Islands II
这是一道大坑无数的题。 首先， 为什么要用union find 呢？
我一开始的想法是每新加一次岛屿， 如果周围没有岛屿， 总岛屿数加一
否则的话， 岛屿数不变。 然后发现自己真的是too young
举个简单的例子
0 1 0
1 0 1
0 1 0
如果把正中间的位置变成1，那么岛屿数还从4 减到了1
所以本质上， 这道题的思路还是要从集合出发的
最后的岛屿数就是连通块的个数。

第二个大坑是： 这个2d 的位置应该怎么表示呢？
我们需要给每个位置一个代号，使得所有位置的代号不重复
九章的答案里给出了一个很神的答案： id = x * m + y
算式是怎么做到不重复的呢？
其实写出来就知道了

（0，0）（0， 1）（0，2）
 0*3+0  1*3+0   2*3+0

（1，0）（1，1） （1，2）
 0*3+1  1*3+1   2*3+1

（2，0）（2，1） （2，2）
 0*3+2  1*3+2   2*3+2

 其余的问题就基本可以套模版解决了
 每次加岛屿的时候， 先把岛屿数+ 1
 看周围，如果有岛屿而且两个岛屿不是一个
 集合的， 就岛屿数- 1， 然后合并
*/
class Solution {
    Map<Integer, Integer> father;
    int[][] islands;

    // convert each position to an unique code
    private int pos2Id(int m, int x, int y) {
        return x * m + y;
    }

    // find the boss and do path compression
    private int find(int x) {
        int boss = x;
        // find the boss
        while(father.get(boss)!= boss) {
            boss = father.get(boss);
        }
        // path compression
        while (x != boss) {
            int temp = father.get(x);
            father.put(x, boss);
            x = temp;
        }
        return boss;
    }

    private void union(int xId, int yId) {
        int bossX = find(xId);
        int bossY = find(yId);
        father.put(bossX, bossY);
    }

    public List<Integer> numIslands2(int m, int n, int[][] positions) {
        List<Integer> result = new ArrayList<>();
        // initialize everything
        father = new HashMap<>();
        islands = new int[m][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int id = pos2Id(m,i,j);
                father.put(id,id);
            }
        }
        int totalIsland = 0;
        int[] dx = {0,0,1,-1};
        int[] dy = {1,-1,0,0};
        // pull each position
        int numPosition = positions.length;
        for (int i = 0; i < numPosition; i++) {
            int[] eachPos = positions[i];
            int cx = eachPos[1];
            int cy = eachPos[0];
            totalIsland++;
            islands[cy][cx] = 1;
            for (int k = 0; k < 4; k++) {
                int nx = cx + dx[k];
                int ny = cy + dy[k];
                if(nx >= 0 && nx < n && ny >= 0 && ny < m && islands[ny][nx] == 1) {
                    int nid = pos2Id(m,nx,ny);
                    int nextBoss = find(nid);
                    int cid = pos2Id(m,cx,cy);
                    int currentBoss = find(cid);
                    if(currentBoss != nextBoss) {
                        totalIsland--;
                        union(cid, nid);
                    }
                }
            }
            result.add(totalIsland);
        }
        return result;
    }
}
