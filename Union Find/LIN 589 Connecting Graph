/*
LIN 589 Connecting Graph
这是一道经典的union find 模版题
union find 一般用array as hashmap
因为node 的值是从1 - n。 所以我建立一个
int【n+1】的数组， 浪费掉index0
来记录当前graph 的情况。 每一个union 里面又一个代表人物
简称老大哥。 这里面最核心的一个函数就是find（int x）
首先找到老大哥， 再对graph 进行path compression， 把所有
遍历的非老大哥元素都指向老大哥。
find 写完以后connect 和query 就很好写了
query 直接return a和b 的老大哥是不是一个人
而connect 的话如果a 和 b 的老大哥不同， 则
让a 的老大哥指向b 的老大哥。
*/
public class ConnectingGraph {
   int[] father;
    /*
    * @param n: An integer
    */public ConnectingGraph(int n) {
        // initialize the father
        father = new int[n + 1];
        for (int i = 1; i < n + 1; i++) {
            father[i] = i;
        }
    }

    /*
     * @param a: An integer
     * @param b: An integer
     * @return: nothing
     */
    public void connect(int a, int b) {
        // write your code here
        int root_a = find(a);
        int root_b = find(b);
        if(root_a != root_b) {
            father[root_a] = root_b;
        }
    }

    private int find(int x) {
        int boss = x;
        // find the biggest boss in here
        while(father[boss] != boss) {
            boss = father[boss];
        }
        // path compression
        while(x != boss) {
            int temp = father[x];
            father[x] = boss;
            x = temp;
        }
        return boss;

    }

    /*
     * @param a: An integer
     * @param b: An integer
     * @return: A boolean
     */
    public boolean query(int a, int b) {
        // write your code here
        int bossA = find(a);
        int bossB = find(b);
        return bossA == bossB;
    }
}
